/**
 */
package SoccerStrategy.Rules.impl;

import SoccerStrategy.Rules.IgnoreOpponentGoalKeeperWithBallRule;
import SoccerStrategy.Rules.RulesPackage;

import SoccerStrategy.SoccerPitchToUpdate;
import SoccerStrategy.SoccerStrategyFactory;

import TGGLanguage.csp.*;

import TGGRuntime.EObjectContainer;
import TGGRuntime.Edge;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.TGGRuntimeFactory;

import TGGRuntime.impl.AbstractRuleImpl;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import soccerpitch.Ball;
import soccerpitch.Field;
import soccerpitch.FieldPlayer;
import soccerpitch.GoalField;
import soccerpitch.GoalKeeper;
import soccerpitch.Player;
import soccerpitch.SoccerPitch;

import updatemodel.MovePlayer;
import updatemodel.ShootBall;
import updatemodel.Update;
import updatemodel.UpdatemodelFactory;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ignore Opponent Goal Keeper With Ball Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class IgnoreOpponentGoalKeeperWithBallRuleImpl extends AbstractRuleImpl
		implements IgnoreOpponentGoalKeeperWithBallRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IgnoreOpponentGoalKeeperWithBallRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.Literals.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Ball ball = null;
		GoalKeeper opponentGoalKeeper = null;
		SoccerPitch pitch = null;
		IsApplicableMatch isApplicableMatch = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("IgnoreOpponentGoalKeeperWithBallRule");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					performOperation, "performOperation");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("ball"));

			// ensure correct type and really bound of object ball
			JavaSDM.ensure(_TmpObject instanceof Ball);
			ball = (Ball) _TmpObject;
			_TmpObject = (match.getObject("opponentGoalKeeper"));

			// ensure correct type and really bound of object opponentGoalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			opponentGoalKeeper = (GoalKeeper) _TmpObject;
			_TmpObject = (match.getObject("pitch"));

			// ensure correct type and really bound of object pitch
			JavaSDM.ensure(_TmpObject instanceof SoccerPitch);
			pitch = (SoccerPitch) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// attribute condition
			JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
					.getOpponentTeam());

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'find context'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// check object opponentGoalKeeper is really bound
			JavaSDM.ensure(opponentGoalKeeper != null);
			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// check link ball from ball to opponentGoalKeeper
			JavaSDM.ensure(opponentGoalKeeper.equals(ball.getPlayer()));

			// check link players from opponentGoalKeeper to pitch
			JavaSDM.ensure(pitch.equals(opponentGoalKeeper.eContainer()));

			// attribute condition
			JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
					.getOpponentTeam());

			// create object isApplicableMatch
			isApplicableMatch = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableMatch();

			// statement node 'solve CSP'

			// Snapshot pattern match on which CSP is solved
			isApplicableMatch.registerObject("opponentGoalKeeper",
					opponentGoalKeeper);
			isApplicableMatch.registerObject("ball", ball);
			isApplicableMatch.registerObject("pitch", pitch);

			// statement node 'check CSP'
			fujaba__Success = true;
			if (fujaba__Success) {
				// story node 'add match to rule result'
				try {
					fujaba__Success = false;

					// check object isApplicableMatch is really bound
					JavaSDM.ensure(isApplicableMatch != null);
					// check object ruleresult is really bound
					JavaSDM.ensure(ruleresult != null);
					// assign attribute ruleresult
					ruleresult.setSuccess(true);

					// create link
					ruleresult.getIsApplicableMatch().add(isApplicableMatch);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

			} else {

			}
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match,
			GoalKeeper opponentGoalKeeper, Ball ball, SoccerPitch pitch) {
		boolean fujaba__Success = false;
		Edge ball__player__opponentGoalKeeper = null;
		Edge pitch__players__opponentGoalKeeper = null;

		// statement node 'Solve CSP'
		//Statement
		// statement node 'Check CSP'
		fujaba__Success = true;
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object opponentGoalKeeper is really bound
				JavaSDM.ensure(opponentGoalKeeper != null);
				// create object ball__player__opponentGoalKeeper
				ball__player__opponentGoalKeeper = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// assign attribute ball__player__opponentGoalKeeper
				ball__player__opponentGoalKeeper.setName("player");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								ball__player__opponentGoalKeeper,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						ball__player__opponentGoalKeeper, opponentGoalKeeper,
						"trg");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						ball__player__opponentGoalKeeper, ball, "src");
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object opponentGoalKeeper is really bound
				JavaSDM.ensure(opponentGoalKeeper != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// create object pitch__players__opponentGoalKeeper
				pitch__players__opponentGoalKeeper = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// assign attribute pitch__players__opponentGoalKeeper
				pitch__players__opponentGoalKeeper.setName("players");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						opponentGoalKeeper, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__players__opponentGoalKeeper, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						ball, "contextNodes");

				// create link
				pitch__players__opponentGoalKeeper.setTrg(opponentGoalKeeper);

				// create link
				pitch__players__opponentGoalKeeper.setSrc(pitch);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			match.registerObject("opponentGoalKeeper", opponentGoalKeeper);
			match.registerObject("ball", ball);
			match.registerObject("pitch", pitch);

			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Ball ball = null;
		GoalKeeper opponentGoalKeeper = null;
		SoccerPitch pitch = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		PerformRuleResult ruleresult = null;
		Edge ball__player__opponentGoalKeeper = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("ball"));

			// ensure correct type and really bound of object ball
			JavaSDM.ensure(_TmpObject instanceof Ball);
			ball = (Ball) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("opponentGoalKeeper"));

			// ensure correct type and really bound of object opponentGoalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			opponentGoalKeeper = (GoalKeeper) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("pitch"));

			// ensure correct type and really bound of object pitch
			JavaSDM.ensure(_TmpObject instanceof SoccerPitch);
			pitch = (SoccerPitch) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			if (!fujaba__Success) {
				fujaba__Success = true;
				csp = null;
			}
			// attribute condition
			JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
					.getOpponentTeam());

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(true);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// check object opponentGoalKeeper is really bound
			JavaSDM.ensure(opponentGoalKeeper != null);
			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check isomorphic binding between objects opponentGoalKeeper and ball 
			JavaSDM.ensure(!opponentGoalKeeper.equals(ball));

			// check isomorphic binding between objects pitch and ball 
			JavaSDM.ensure(!pitch.equals(ball));

			// check isomorphic binding between objects pitch and opponentGoalKeeper 
			JavaSDM.ensure(!pitch.equals(opponentGoalKeeper));

			// create object ball__player__opponentGoalKeeper
			ball__player__opponentGoalKeeper = TGGRuntimeFactory.eINSTANCE
					.createEdge();

			// assign attribute ball__player__opponentGoalKeeper
			ball__player__opponentGoalKeeper.setName("player");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					ball__player__opponentGoalKeeper, "translatedEdges");

			// create link
			ball__player__opponentGoalKeeper.setTrg(opponentGoalKeeper);

			// create link
			ball__player__opponentGoalKeeper.setSrc(ball);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_GoalKeeper_6(
			GoalKeeper opponentGoalKeeper) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Match match = null;
		SoccerPitch pitch = null;
		Ball ball = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object opponentGoalKeeper is really bound
			JavaSDM.ensure(opponentGoalKeeper != null);
			// bind object
			ball = opponentGoalKeeper.getBall();

			// check object ball is really bound
			JavaSDM.ensure(ball != null);

			// bind object
			pitch = opponentGoalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) opponentGoalKeeper
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getPlayers().contains(opponentGoalKeeper));

			// attribute condition
			JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
					.getOpponentTeam());

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object opponentGoalKeeper is really bound
				JavaSDM.ensure(opponentGoalKeeper != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// check link ball from ball to opponentGoalKeeper
				JavaSDM.ensure(opponentGoalKeeper.equals(ball.getPlayer()));

				// check link players from opponentGoalKeeper to pitch
				JavaSDM.ensure(pitch.equals(opponentGoalKeeper.eContainer()));

				// attribute condition
				JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
						.getOpponentTeam());

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match,
						opponentGoalKeeper, ball, pitch);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(__result, match,
											"contents");

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");
							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_Ball_3(Ball ball) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Match match = null;
		SoccerPitch pitch = null;
		GoalKeeper opponentGoalKeeper = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// bind object
			_TmpObject = ball.getPlayer();

			// ensure correct type and really bound of object opponentGoalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			opponentGoalKeeper = (GoalKeeper) _TmpObject;

			// bind object
			pitch = opponentGoalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) opponentGoalKeeper
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getPlayers().contains(opponentGoalKeeper));

			// attribute condition
			JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
					.getOpponentTeam());

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object opponentGoalKeeper is really bound
				JavaSDM.ensure(opponentGoalKeeper != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// check link ball from ball to opponentGoalKeeper
				JavaSDM.ensure(opponentGoalKeeper.equals(ball.getPlayer()));

				// check link players from opponentGoalKeeper to pitch
				JavaSDM.ensure(pitch.equals(opponentGoalKeeper.eContainer()));

				// attribute condition
				JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
						.getOpponentTeam());

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match,
						opponentGoalKeeper, ball, pitch);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(__result, match,
											"contents");

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");
							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_SoccerPitch_11(SoccerPitch pitch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Match match = null;
		Ball ball = null;
		Iterator fujaba__IterPitchToOpponentGoalKeeper = null;
		GoalKeeper opponentGoalKeeper = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// iterate to-many link players from pitch to opponentGoalKeeper
			fujaba__Success = false;

			fujaba__IterPitchToOpponentGoalKeeper = new ArrayList(
					pitch.getPlayers()).iterator();

			while (fujaba__IterPitchToOpponentGoalKeeper.hasNext()) {
				try {
					_TmpObject = fujaba__IterPitchToOpponentGoalKeeper.next();

					// ensure correct type and really bound of object opponentGoalKeeper
					JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
					opponentGoalKeeper = (GoalKeeper) _TmpObject;
					// bind object
					ball = opponentGoalKeeper.getBall();

					// check object ball is really bound
					JavaSDM.ensure(ball != null);

					// attribute condition
					JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
							.getOpponentTeam());

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check object ball is really bound
						JavaSDM.ensure(ball != null);
						// check object opponentGoalKeeper is really bound
						JavaSDM.ensure(opponentGoalKeeper != null);
						// check object pitch is really bound
						JavaSDM.ensure(pitch != null);
						// check link ball from ball to opponentGoalKeeper
						JavaSDM.ensure(opponentGoalKeeper.equals(ball
								.getPlayer()));

						// check link players from opponentGoalKeeper to pitch
						JavaSDM.ensure(pitch.equals(opponentGoalKeeper
								.eContainer()));

						// attribute condition
						JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
								.getOpponentTeam());

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match,
								opponentGoalKeeper, ball, pitch);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(__result,
													match, "contents");

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");
									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_Ball_0(Ball ball,
			GoalKeeper opponentGoalKeeper) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Match match = null;
		SoccerPitch pitch = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// check object opponentGoalKeeper is really bound
			JavaSDM.ensure(opponentGoalKeeper != null);
			// check link ball from ball to opponentGoalKeeper
			JavaSDM.ensure(opponentGoalKeeper.equals(ball.getPlayer()));

			// bind object
			pitch = opponentGoalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) opponentGoalKeeper
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getPlayers().contains(opponentGoalKeeper));

			// attribute condition
			JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
					.getOpponentTeam());

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object opponentGoalKeeper is really bound
				JavaSDM.ensure(opponentGoalKeeper != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// check link ball from ball to opponentGoalKeeper
				JavaSDM.ensure(opponentGoalKeeper.equals(ball.getPlayer()));

				// check link players from opponentGoalKeeper to pitch
				JavaSDM.ensure(pitch.equals(opponentGoalKeeper.eContainer()));

				// attribute condition
				JavaSDM.ensure(opponentGoalKeeper.getTeam() == pitch
						.getOpponentTeam());

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match,
						opponentGoalKeeper, ball, pitch);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(__result, match,
											"contents");

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");
							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___IS_APPROPRIATE_FWD__MATCH_GOALKEEPER_BALL_SOCCERPITCH:
			return isAppropriate_FWD((Match) arguments.get(0),
					(GoalKeeper) arguments.get(1), (Ball) arguments.get(2),
					(SoccerPitch) arguments.get(3));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___IS_APPROPRIATE_FWD_GOAL_KEEPER_6__GOALKEEPER:
			return isAppropriate_FWD_GoalKeeper_6((GoalKeeper) arguments.get(0));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___IS_APPROPRIATE_FWD_BALL_3__BALL:
			return isAppropriate_FWD_Ball_3((Ball) arguments.get(0));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___IS_APPROPRIATE_FWD_SOCCER_PITCH_11__SOCCERPITCH:
			return isAppropriate_FWD_SoccerPitch_11((SoccerPitch) arguments
					.get(0));
		case RulesPackage.IGNORE_OPPONENT_GOAL_KEEPER_WITH_BALL_RULE___IS_APPROPRIATE_FWD_BALL_0__BALL_GOALKEEPER:
			return isAppropriate_FWD_Ball_0((Ball) arguments.get(0),
					(GoalKeeper) arguments.get(1));
		}
		return super.eInvoke(operationID, arguments);
	}

} //IgnoreOpponentGoalKeeperWithBallRuleImpl
