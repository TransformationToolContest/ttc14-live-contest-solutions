/**
 */
package SoccerStrategy.Rules.util;

import SoccerStrategy.Rules.*;

import TGGRuntime.AbstractRule;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see SoccerStrategy.Rules.RulesPackage
 * @generated
 */
public class RulesAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static RulesPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RulesAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = RulesPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject) object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RulesSwitch<Adapter> modelSwitch = new RulesSwitch<Adapter>() {
		@Override
		public Adapter caseCreateUpdateRule(CreateUpdateRule object) {
			return createCreateUpdateRuleAdapter();
		}

		@Override
		public Adapter caseMoveForwardRule(MoveForwardRule object) {
			return createMoveForwardRuleAdapter();
		}

		@Override
		public Adapter caseCreateEastWestLinksRule(
				CreateEastWestLinksRule object) {
			return createCreateEastWestLinksRuleAdapter();
		}

		@Override
		public Adapter caseCreateNorthSouthLinksRule(
				CreateNorthSouthLinksRule object) {
			return createCreateNorthSouthLinksRuleAdapter();
		}

		@Override
		public Adapter caseRegularFields(RegularFields object) {
			return createRegularFieldsAdapter();
		}

		@Override
		public Adapter caseDoNotMoveGoalKeeper(DoNotMoveGoalKeeper object) {
			return createDoNotMoveGoalKeeperAdapter();
		}

		@Override
		public Adapter caseCreateBallRule(CreateBallRule object) {
			return createCreateBallRuleAdapter();
		}

		@Override
		public Adapter caseLinkBallToPlayerRule(LinkBallToPlayerRule object) {
			return createLinkBallToPlayerRuleAdapter();
		}

		@Override
		public Adapter caseGoalFields(GoalFields object) {
			return createGoalFieldsAdapter();
		}

		@Override
		public Adapter caseIgnoreOpponentPlayersRule(
				IgnoreOpponentPlayersRule object) {
			return createIgnoreOpponentPlayersRuleAdapter();
		}

		@Override
		public Adapter caseMoveGoalKeeperNorth(MoveGoalKeeperNorth object) {
			return createMoveGoalKeeperNorthAdapter();
		}

		@Override
		public Adapter caseIgnoreOpponentGoalKeeperRule(
				IgnoreOpponentGoalKeeperRule object) {
			return createIgnoreOpponentGoalKeeperRuleAdapter();
		}

		@Override
		public Adapter caseGoalKeeper_KickOffBall(GoalKeeper_KickOffBall object) {
			return createGoalKeeper_KickOffBallAdapter();
		}

		@Override
		public Adapter caseMoveGoalKeeperSouth(MoveGoalKeeperSouth object) {
			return createMoveGoalKeeperSouthAdapter();
		}

		@Override
		public Adapter caseIgnoreOpponentGoalKeeperWithBallRule(
				IgnoreOpponentGoalKeeperWithBallRule object) {
			return createIgnoreOpponentGoalKeeperWithBallRuleAdapter();
		}

		@Override
		public Adapter caseGoalKeeperPassesToPlayerRule(
				GoalKeeperPassesToPlayerRule object) {
			return createGoalKeeperPassesToPlayerRuleAdapter();
		}

		@Override
		public Adapter caseGoalKeeperPassesToPlayer_Red(
				GoalKeeperPassesToPlayer_Red object) {
			return createGoalKeeperPassesToPlayer_RedAdapter();
		}

		@Override
		public Adapter casePlayerToPlayerShot(PlayerToPlayerShot object) {
			return createPlayerToPlayerShotAdapter();
		}

		@Override
		public Adapter caseGoalKeeperPassesToPlayer2_Blue(
				GoalKeeperPassesToPlayer2_Blue object) {
			return createGoalKeeperPassesToPlayer2_BlueAdapter();
		}

		@Override
		public Adapter caseAbstractRule(AbstractRule object) {
			return createAbstractRuleAdapter();
		}

		@Override
		public Adapter defaultCase(EObject object) {
			return createEObjectAdapter();
		}
	};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject) target);
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.CreateUpdateRule <em>Create Update Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.CreateUpdateRule
	 * @generated
	 */
	public Adapter createCreateUpdateRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.MoveForwardRule <em>Move Forward Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.MoveForwardRule
	 * @generated
	 */
	public Adapter createMoveForwardRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.CreateEastWestLinksRule <em>Create East West Links Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.CreateEastWestLinksRule
	 * @generated
	 */
	public Adapter createCreateEastWestLinksRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.CreateNorthSouthLinksRule <em>Create North South Links Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.CreateNorthSouthLinksRule
	 * @generated
	 */
	public Adapter createCreateNorthSouthLinksRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.RegularFields <em>Regular Fields</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.RegularFields
	 * @generated
	 */
	public Adapter createRegularFieldsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.DoNotMoveGoalKeeper <em>Do Not Move Goal Keeper</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.DoNotMoveGoalKeeper
	 * @generated
	 */
	public Adapter createDoNotMoveGoalKeeperAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.CreateBallRule <em>Create Ball Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.CreateBallRule
	 * @generated
	 */
	public Adapter createCreateBallRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.LinkBallToPlayerRule <em>Link Ball To Player Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.LinkBallToPlayerRule
	 * @generated
	 */
	public Adapter createLinkBallToPlayerRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.GoalFields <em>Goal Fields</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.GoalFields
	 * @generated
	 */
	public Adapter createGoalFieldsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.IgnoreOpponentPlayersRule <em>Ignore Opponent Players Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.IgnoreOpponentPlayersRule
	 * @generated
	 */
	public Adapter createIgnoreOpponentPlayersRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.MoveGoalKeeperNorth <em>Move Goal Keeper North</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.MoveGoalKeeperNorth
	 * @generated
	 */
	public Adapter createMoveGoalKeeperNorthAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.IgnoreOpponentGoalKeeperRule <em>Ignore Opponent Goal Keeper Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.IgnoreOpponentGoalKeeperRule
	 * @generated
	 */
	public Adapter createIgnoreOpponentGoalKeeperRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.GoalKeeper_KickOffBall <em>Goal Keeper Kick Off Ball</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.GoalKeeper_KickOffBall
	 * @generated
	 */
	public Adapter createGoalKeeper_KickOffBallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.MoveGoalKeeperSouth <em>Move Goal Keeper South</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.MoveGoalKeeperSouth
	 * @generated
	 */
	public Adapter createMoveGoalKeeperSouthAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.IgnoreOpponentGoalKeeperWithBallRule <em>Ignore Opponent Goal Keeper With Ball Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.IgnoreOpponentGoalKeeperWithBallRule
	 * @generated
	 */
	public Adapter createIgnoreOpponentGoalKeeperWithBallRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.GoalKeeperPassesToPlayerRule <em>Goal Keeper Passes To Player Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.GoalKeeperPassesToPlayerRule
	 * @generated
	 */
	public Adapter createGoalKeeperPassesToPlayerRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.GoalKeeperPassesToPlayer_Red <em>Goal Keeper Passes To Player Red</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.GoalKeeperPassesToPlayer_Red
	 * @generated
	 */
	public Adapter createGoalKeeperPassesToPlayer_RedAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.PlayerToPlayerShot <em>Player To Player Shot</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.PlayerToPlayerShot
	 * @generated
	 */
	public Adapter createPlayerToPlayerShotAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link SoccerStrategy.Rules.GoalKeeperPassesToPlayer2_Blue <em>Goal Keeper Passes To Player2 Blue</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see SoccerStrategy.Rules.GoalKeeperPassesToPlayer2_Blue
	 * @generated
	 */
	public Adapter createGoalKeeperPassesToPlayer2_BlueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link TGGRuntime.AbstractRule <em>Abstract Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see TGGRuntime.AbstractRule
	 * @generated
	 */
	public Adapter createAbstractRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //RulesAdapterFactory
