/**
 */
package SoccerStrategy.Rules.impl;

import SoccerStrategy.Rules.MoveForwardRule;
import SoccerStrategy.Rules.RulesPackage;

import SoccerStrategy.SoccerPitchToUpdate;
import SoccerStrategy.SoccerStrategyFactory;

import TGGLanguage.csp.*;

import TGGRuntime.EObjectContainer;
import TGGRuntime.Edge;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.TGGRuntimeFactory;

import TGGRuntime.impl.AbstractRuleImpl;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import soccerpitch.Ball;
import soccerpitch.Field;
import soccerpitch.FieldPlayer;
import soccerpitch.GoalField;
import soccerpitch.GoalKeeper;
import soccerpitch.Player;
import soccerpitch.SoccerPitch;

import updatemodel.MovePlayer;
import updatemodel.ShootBall;
import updatemodel.Update;
import updatemodel.UpdatemodelFactory;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move Forward Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class MoveForwardRuleImpl extends AbstractRuleImpl implements
		MoveForwardRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveForwardRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.Literals.MOVE_FORWARD_RULE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Field field = null;
		GoalKeeper goalKeeper = null;
		SoccerPitch pitch = null;
		FieldPlayer player = null;
		IsApplicableMatch isApplicableMatch = null;
		Update update = null;
		Iterator fujaba__IterPitchToU2p = null;
		SoccerPitchToUpdate u2p = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("MoveForwardRule");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					performOperation, "performOperation");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("field"));

			// ensure correct type and really bound of object field
			JavaSDM.ensure(_TmpObject instanceof Field);
			field = (Field) _TmpObject;
			_TmpObject = (match.getObject("goalKeeper"));

			// ensure correct type and really bound of object goalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			goalKeeper = (GoalKeeper) _TmpObject;
			_TmpObject = (match.getObject("pitch"));

			// ensure correct type and really bound of object pitch
			JavaSDM.ensure(_TmpObject instanceof SoccerPitch);
			pitch = (SoccerPitch) _TmpObject;
			_TmpObject = (match.getObject("player"));

			// ensure correct type and really bound of object player
			JavaSDM.ensure(_TmpObject instanceof FieldPlayer);
			player = (FieldPlayer) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// attribute condition
			JavaSDM.ensure(field.getXPos() < 44);

			// attribute condition
			JavaSDM.ensure(field.getXPos() > 0);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'find context'
		try {
			fujaba__Success = false;

			// check object field is really bound
			JavaSDM.ensure(field != null);
			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// check object player is really bound
			JavaSDM.ensure(player != null);
			// check link field from player to field
			JavaSDM.ensure(field.equals(player.getField()));

			// check link fields from field to pitch
			JavaSDM.ensure(pitch.equals(field.eContainer()));

			// check link players from goalKeeper to pitch
			JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

			// check link players from player to pitch
			JavaSDM.ensure(pitch.equals(player.eContainer()));

			// iterate to-many link source from pitch to u2p
			fujaba__Success = false;

			fujaba__IterPitchToU2p = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(pitch,
							SoccerPitchToUpdate.class, "source")).iterator();

			while (fujaba__IterPitchToU2p.hasNext()) {
				try {
					u2p = (SoccerPitchToUpdate) fujaba__IterPitchToU2p.next();

					// check object u2p is really bound
					JavaSDM.ensure(u2p != null);
					// bind object
					update = u2p.getTarget();

					// check object update is really bound
					JavaSDM.ensure(update != null);

					// attribute condition
					JavaSDM.ensure(field.getXPos() < 44);

					// attribute condition
					JavaSDM.ensure(field.getXPos() > 0);

					// create object isApplicableMatch
					isApplicableMatch = TGGRuntimeFactory.eINSTANCE
							.createIsApplicableMatch();

					// statement node 'solve CSP'
					// Create CSP
					CSP csp = CspFactory.eINSTANCE.createCSP();
					isApplicableMatch.getAttributeInfo().add(csp);

					// Create literals

					// Create attribute variables
					Variable<Number> var_player_number = CspFactory.eINSTANCE
							.createVariable("player.number", true, csp);
					var_player_number.setValue(player.getNumber());
					Variable<soccerpitch.Teams> var_pitch_ownTeam = CspFactory.eINSTANCE
							.createVariable("pitch.ownTeam", true, csp);
					var_pitch_ownTeam.setValue(pitch.getOwnTeam());

					// Create explicit parameters

					// Create unbound variables
					Variable<Number> var_moveAction_playerNumber = CspFactory.eINSTANCE
							.createVariable("moveAction.playerNumber", csp);
					Variable<Number> var_moveAction_xDist = CspFactory.eINSTANCE
							.createVariable("moveAction.xDist", csp);

					// Create constraints
					Eq<Number> eq = new Eq<Number>();
					TeamToDirection teamToDirection = new TeamToDirection();

					csp.getConstraints().add(eq);
					csp.getConstraints().add(teamToDirection);

					// Solve CSP
					eq.setRuleName("");
					eq.solve(var_player_number, var_moveAction_playerNumber);
					teamToDirection.setRuleName("");
					teamToDirection.solve(var_pitch_ownTeam,
							var_moveAction_xDist);

					// Snapshot pattern match on which CSP is solved
					isApplicableMatch.registerObject("pitch", pitch);
					isApplicableMatch.registerObject("update", update);
					isApplicableMatch.registerObject("u2p", u2p);
					isApplicableMatch.registerObject("field", field);
					isApplicableMatch.registerObject("player", player);
					isApplicableMatch.registerObject("goalKeeper", goalKeeper);

					// statement node 'check CSP'
					fujaba__Success = csp.check();
					if (fujaba__Success) {
						// story node 'add match to rule result'
						try {
							fujaba__Success = false;

							// check object isApplicableMatch is really bound
							JavaSDM.ensure(isApplicableMatch != null);
							// check object ruleresult is really bound
							JavaSDM.ensure(ruleresult != null);
							// assign attribute ruleresult
							ruleresult.setSuccess(true);

							// create link
							ruleresult.getIsApplicableMatch().add(
									isApplicableMatch);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, SoccerPitch pitch,
			Field field, FieldPlayer player, GoalKeeper goalKeeper) {
		boolean fujaba__Success = false;
		Edge pitch__players__player = null;
		Edge player__field__field = null;
		Edge pitch__players__goalKeeper = null;
		Edge pitch__fields__field = null;

		// statement node 'Solve CSP'
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables
		Variable<soccerpitch.Teams> var_player_team = CspFactory.eINSTANCE
				.createVariable("player.team", true, csp);
		var_player_team.setValue(player.getTeam());
		Variable<soccerpitch.Teams> var_pitch_ownTeam = CspFactory.eINSTANCE
				.createVariable("pitch.ownTeam", true, csp);
		var_pitch_ownTeam.setValue(pitch.getOwnTeam());

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		Eq<soccerpitch.Teams> eq = new Eq<soccerpitch.Teams>();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_player_team, var_pitch_ownTeam);

		// statement node 'Check CSP'
		fujaba__Success = csp.check();
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object field is really bound
				JavaSDM.ensure(field != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// check object player is really bound
				JavaSDM.ensure(player != null);
				// create object pitch__players__player
				pitch__players__player = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// create object player__field__field
				player__field__field = TGGRuntimeFactory.eINSTANCE.createEdge();

				// assign attribute pitch__players__player
				pitch__players__player.setName("players");
				// assign attribute player__field__field
				player__field__field.setName("field");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__players__player, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						player__field__field, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						player, "toBeTranslatedElements");

				// create link
				pitch__players__player.setTrg(player);

				// create link
				player__field__field.setSrc(player);

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						pitch__players__player, pitch, "src");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						player__field__field, field, "trg");
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object field is really bound
				JavaSDM.ensure(field != null);
				// check object goalKeeper is really bound
				JavaSDM.ensure(goalKeeper != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// create object pitch__players__goalKeeper
				pitch__players__goalKeeper = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// create object pitch__fields__field
				pitch__fields__field = TGGRuntimeFactory.eINSTANCE.createEdge();

				// assign attribute pitch__players__goalKeeper
				pitch__players__goalKeeper.setName("players");
				// assign attribute pitch__fields__field
				pitch__fields__field.setName("fields");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						goalKeeper, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__players__goalKeeper, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__fields__field, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						field, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch, "contextNodes");

				// create link
				pitch__players__goalKeeper.setSrc(pitch);

				// create link
				pitch__fields__field.setSrc(pitch);

				// create link
				pitch__fields__field.setTrg(field);

				// create link
				pitch__players__goalKeeper.setTrg(goalKeeper);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			match.registerObject("pitch", pitch);
			match.registerObject("field", field);
			match.registerObject("player", player);
			match.registerObject("goalKeeper", goalKeeper);

			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Field field = null;
		GoalKeeper goalKeeper = null;
		SoccerPitch pitch = null;
		FieldPlayer player = null;
		SoccerPitchToUpdate u2p = null;
		Update update = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		MovePlayer moveAction = null;
		PerformRuleResult ruleresult = null;
		Edge player__field__field = null;
		Edge update__actions__moveAction = null;
		Edge pitch__players__player = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("field"));

			// ensure correct type and really bound of object field
			JavaSDM.ensure(_TmpObject instanceof Field);
			field = (Field) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("goalKeeper"));

			// ensure correct type and really bound of object goalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			goalKeeper = (GoalKeeper) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("pitch"));

			// ensure correct type and really bound of object pitch
			JavaSDM.ensure(_TmpObject instanceof SoccerPitch);
			pitch = (SoccerPitch) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("player"));

			// ensure correct type and really bound of object player
			JavaSDM.ensure(_TmpObject instanceof FieldPlayer);
			player = (FieldPlayer) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("u2p"));

			// ensure correct type and really bound of object u2p
			JavaSDM.ensure(_TmpObject instanceof SoccerPitchToUpdate);
			u2p = (SoccerPitchToUpdate) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("update"));

			// ensure correct type and really bound of object update
			JavaSDM.ensure(_TmpObject instanceof Update);
			update = (Update) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			if (!fujaba__Success) {
				fujaba__Success = true;
				csp = null;
			}
			// attribute condition
			JavaSDM.ensure(field.getXPos() < 44);

			// attribute condition
			JavaSDM.ensure(field.getXPos() > 0);

			// create object moveAction
			moveAction = UpdatemodelFactory.eINSTANCE.createMovePlayer();

			// assign attribute moveAction
			moveAction.setPlayerNumber(((Number) csp.getAttributeVariable(
					"moveAction", "playerNumber").getValue()).intValue());
			// assign attribute moveAction
			moveAction.setXDist(((Number) csp.getAttributeVariable(
					"moveAction", "xDist").getValue()).intValue());

			// create link
			update.getActions().add(moveAction); // add link

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object moveAction is really bound
			JavaSDM.ensure(moveAction != null);
			// check object player is really bound
			JavaSDM.ensure(player != null);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(true);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					moveAction, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					player, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object field is really bound
			JavaSDM.ensure(field != null);
			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// check object moveAction is really bound
			JavaSDM.ensure(moveAction != null);
			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// check object player is really bound
			JavaSDM.ensure(player != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object u2p is really bound
			JavaSDM.ensure(u2p != null);
			// check object update is really bound
			JavaSDM.ensure(update != null);
			// check isomorphic binding between objects goalKeeper and field 
			JavaSDM.ensure(!goalKeeper.equals(field));

			// check isomorphic binding between objects moveAction and field 
			JavaSDM.ensure(!moveAction.equals(field));

			// check isomorphic binding between objects pitch and field 
			JavaSDM.ensure(!pitch.equals(field));

			// check isomorphic binding between objects player and field 
			JavaSDM.ensure(!player.equals(field));

			// check isomorphic binding between objects u2p and field 
			JavaSDM.ensure(!u2p.equals(field));

			// check isomorphic binding between objects update and field 
			JavaSDM.ensure(!update.equals(field));

			// check isomorphic binding between objects moveAction and goalKeeper 
			JavaSDM.ensure(!moveAction.equals(goalKeeper));

			// check isomorphic binding between objects pitch and goalKeeper 
			JavaSDM.ensure(!pitch.equals(goalKeeper));

			// check isomorphic binding between objects player and goalKeeper 
			JavaSDM.ensure(!player.equals(goalKeeper));

			// check isomorphic binding between objects u2p and goalKeeper 
			JavaSDM.ensure(!u2p.equals(goalKeeper));

			// check isomorphic binding between objects update and goalKeeper 
			JavaSDM.ensure(!update.equals(goalKeeper));

			// check isomorphic binding between objects pitch and moveAction 
			JavaSDM.ensure(!pitch.equals(moveAction));

			// check isomorphic binding between objects player and moveAction 
			JavaSDM.ensure(!player.equals(moveAction));

			// check isomorphic binding between objects u2p and moveAction 
			JavaSDM.ensure(!u2p.equals(moveAction));

			// check isomorphic binding between objects update and moveAction 
			JavaSDM.ensure(!update.equals(moveAction));

			// check isomorphic binding between objects player and pitch 
			JavaSDM.ensure(!player.equals(pitch));

			// check isomorphic binding between objects u2p and pitch 
			JavaSDM.ensure(!u2p.equals(pitch));

			// check isomorphic binding between objects update and pitch 
			JavaSDM.ensure(!update.equals(pitch));

			// check isomorphic binding between objects u2p and player 
			JavaSDM.ensure(!u2p.equals(player));

			// check isomorphic binding between objects update and player 
			JavaSDM.ensure(!update.equals(player));

			// check isomorphic binding between objects update and u2p 
			JavaSDM.ensure(!update.equals(u2p));

			// create object player__field__field
			player__field__field = TGGRuntimeFactory.eINSTANCE.createEdge();

			// create object update__actions__moveAction
			update__actions__moveAction = TGGRuntimeFactory.eINSTANCE
					.createEdge();

			// create object pitch__players__player
			pitch__players__player = TGGRuntimeFactory.eINSTANCE.createEdge();

			// assign attribute pitch__players__player
			pitch__players__player.setName("players");
			// assign attribute update__actions__moveAction
			update__actions__moveAction.setName("actions");
			// assign attribute player__field__field
			player__field__field.setName("field");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					player__field__field, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					update__actions__moveAction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					pitch__players__player, "translatedEdges");

			// create link
			pitch__players__player.setSrc(pitch);

			// create link
			update__actions__moveAction.setSrc(update);

			// create link
			player__field__field.setTrg(field);

			// create link
			update__actions__moveAction.setTrg(moveAction);

			// create link
			player__field__field.setSrc(player);

			// create link
			pitch__players__player.setTrg(player);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return match
				.getObject("player")
				.eClass()
				.equals(soccerpitch.SoccerpitchPackage.eINSTANCE
						.getFieldPlayer());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_SoccerPitch_1(SoccerPitch pitch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_player_players_759475 = null;
		SoccerPitch __DEC_player_players_265559 = null;
		Match match = null;
		Iterator fujaba__IterPitchToPlayer = null;
		FieldPlayer player = null;
		Iterator fujaba__IterPitchToGoalKeeper = null;
		GoalKeeper goalKeeper = null;
		Iterator fujaba__IterPitchToField = null;
		Field field = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// iterate to-many link fields from pitch to field
			fujaba__Success = false;

			fujaba__IterPitchToField = new ArrayList(pitch.getFields())
					.iterator();

			while (fujaba__IterPitchToField.hasNext()) {
				try {
					field = (Field) fujaba__IterPitchToField.next();

					// check object field is really bound
					JavaSDM.ensure(field != null);
					// iterate to-many link players from pitch to goalKeeper
					fujaba__Success = false;

					fujaba__IterPitchToGoalKeeper = new ArrayList(
							pitch.getPlayers()).iterator();

					while (fujaba__IterPitchToGoalKeeper.hasNext()) {
						try {
							_TmpObject = fujaba__IterPitchToGoalKeeper.next();

							// ensure correct type and really bound of object goalKeeper
							JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
							goalKeeper = (GoalKeeper) _TmpObject;
							// iterate to-many link players from pitch to player
							fujaba__Success = false;

							fujaba__IterPitchToPlayer = new ArrayList(
									pitch.getPlayers()).iterator();

							while (fujaba__IterPitchToPlayer.hasNext()) {
								try {
									_TmpObject = fujaba__IterPitchToPlayer
											.next();

									// ensure correct type and really bound of object player
									JavaSDM.ensure(_TmpObject instanceof FieldPlayer);
									player = (FieldPlayer) _TmpObject;
									// check link field from player to field
									JavaSDM.ensure(field.equals(player
											.getField()));

									// attribute condition
									JavaSDM.ensure(field.getXPos() < 44);

									// attribute condition
									JavaSDM.ensure(field.getXPos() > 0);

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_player_players_759475 = player
													.getField();

											// check object __DEC_player_players_759475 is really bound
											JavaSDM.ensure(__DEC_player_players_759475 != null);

											// check isomorphic binding between objects __DEC_player_players_759475 and field 
											JavaSDM.ensure(!__DEC_player_players_759475
													.equals(field));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_player_players_265559 = player
													.eContainer() instanceof SoccerPitch ? (SoccerPitch) player
													.eContainer() : null;

											// check object __DEC_player_players_265559 is really bound
											JavaSDM.ensure(__DEC_player_players_265559 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_player_players_265559
													.getPlayers().contains(
															player));

											// check isomorphic binding between objects __DEC_player_players_265559 and pitch 
											JavaSDM.ensure(!__DEC_player_players_265559
													.equals(pitch));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check object field is really bound
										JavaSDM.ensure(field != null);
										// check object goalKeeper is really bound
										JavaSDM.ensure(goalKeeper != null);
										// check object pitch is really bound
										JavaSDM.ensure(pitch != null);
										// check object player is really bound
										JavaSDM.ensure(player != null);
										// check link field from player to field
										JavaSDM.ensure(field.equals(player
												.getField()));

										// check link fields from field to pitch
										JavaSDM.ensure(pitch.equals(field
												.eContainer()));

										// check link players from goalKeeper to pitch
										JavaSDM.ensure(pitch.equals(goalKeeper
												.eContainer()));

										// check link players from player to pitch
										JavaSDM.ensure(pitch.equals(player
												.eContainer()));

										// attribute condition
										JavaSDM.ensure(field.getXPos() < 44);

										// attribute condition
										JavaSDM.ensure(field.getXPos() > 0);

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_FWD(match,
														pitch, field, player,
														goalKeeper);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_FWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	__result,
																	match,
																	"contents");

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_Field_0(Field field) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_player_players_298323 = null;
		SoccerPitch __DEC_player_players_927641 = null;
		Match match = null;
		Iterator fujaba__IterPitchToGoalKeeper = null;
		GoalKeeper goalKeeper = null;
		Iterator fujaba__IterFieldToPlayer = null;
		FieldPlayer player = null;
		SoccerPitch pitch = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object field is really bound
			JavaSDM.ensure(field != null);
			// bind object
			pitch = field.eContainer() instanceof SoccerPitch ? (SoccerPitch) field
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getFields().contains(field));

			// iterate to-many link field from field to player
			fujaba__Success = false;

			fujaba__IterFieldToPlayer = new ArrayList(field.getPlayers())
					.iterator();

			while (fujaba__IterFieldToPlayer.hasNext()) {
				try {
					_TmpObject = fujaba__IterFieldToPlayer.next();

					// ensure correct type and really bound of object player
					JavaSDM.ensure(_TmpObject instanceof FieldPlayer);
					player = (FieldPlayer) _TmpObject;
					// check link players from player to pitch
					JavaSDM.ensure(pitch.equals(player.eContainer()));

					// iterate to-many link players from pitch to goalKeeper
					fujaba__Success = false;

					fujaba__IterPitchToGoalKeeper = new ArrayList(
							pitch.getPlayers()).iterator();

					while (fujaba__IterPitchToGoalKeeper.hasNext()) {
						try {
							_TmpObject = fujaba__IterPitchToGoalKeeper.next();

							// ensure correct type and really bound of object goalKeeper
							JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
							goalKeeper = (GoalKeeper) _TmpObject;
							// attribute condition
							JavaSDM.ensure(field.getXPos() < 44);

							// attribute condition
							JavaSDM.ensure(field.getXPos() > 0);

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_player_players_298323 = player
											.getField();

									// check object __DEC_player_players_298323 is really bound
									JavaSDM.ensure(__DEC_player_players_298323 != null);

									// check isomorphic binding between objects __DEC_player_players_298323 and field 
									JavaSDM.ensure(!__DEC_player_players_298323
											.equals(field));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_player_players_927641 = player
											.eContainer() instanceof SoccerPitch ? (SoccerPitch) player
											.eContainer() : null;

									// check object __DEC_player_players_927641 is really bound
									JavaSDM.ensure(__DEC_player_players_927641 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_player_players_927641
											.getPlayers().contains(player));

									// check isomorphic binding between objects __DEC_player_players_927641 and pitch 
									JavaSDM.ensure(!__DEC_player_players_927641
											.equals(pitch));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object field is really bound
								JavaSDM.ensure(field != null);
								// check object goalKeeper is really bound
								JavaSDM.ensure(goalKeeper != null);
								// check object pitch is really bound
								JavaSDM.ensure(pitch != null);
								// check object player is really bound
								JavaSDM.ensure(player != null);
								// check link field from player to field
								JavaSDM.ensure(field.equals(player.getField()));

								// check link fields from field to pitch
								JavaSDM.ensure(pitch.equals(field.eContainer()));

								// check link players from goalKeeper to pitch
								JavaSDM.ensure(pitch.equals(goalKeeper
										.eContainer()));

								// check link players from player to pitch
								JavaSDM.ensure(pitch.equals(player.eContainer()));

								// attribute condition
								JavaSDM.ensure(field.getXPos() < 44);

								// attribute condition
								JavaSDM.ensure(field.getXPos() > 0);

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										pitch, field, player, goalKeeper);
								if (fujaba__Success) {
									// statement node ''
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															__result, match,
															"contents");

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");
											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_FieldPlayer_0(FieldPlayer player) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_player_players_906766 = null;
		SoccerPitch __DEC_player_players_899705 = null;
		Match match = null;
		Iterator fujaba__IterPitchToGoalKeeper = null;
		GoalKeeper goalKeeper = null;
		SoccerPitch pitch = null;
		Field field = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object player is really bound
			JavaSDM.ensure(player != null);
			// bind object
			field = player.getField();

			// check object field is really bound
			JavaSDM.ensure(field != null);

			// bind object
			pitch = player.eContainer() instanceof SoccerPitch ? (SoccerPitch) player
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getPlayers().contains(player));

			// check link fields from field to pitch
			JavaSDM.ensure(pitch.equals(field.eContainer()));

			// iterate to-many link players from pitch to goalKeeper
			fujaba__Success = false;

			fujaba__IterPitchToGoalKeeper = new ArrayList(pitch.getPlayers())
					.iterator();

			while (fujaba__IterPitchToGoalKeeper.hasNext()) {
				try {
					_TmpObject = fujaba__IterPitchToGoalKeeper.next();

					// ensure correct type and really bound of object goalKeeper
					JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
					goalKeeper = (GoalKeeper) _TmpObject;
					// attribute condition
					JavaSDM.ensure(field.getXPos() < 44);

					// attribute condition
					JavaSDM.ensure(field.getXPos() > 0);

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_player_players_906766 = player.getField();

							// check object __DEC_player_players_906766 is really bound
							JavaSDM.ensure(__DEC_player_players_906766 != null);

							// check isomorphic binding between objects __DEC_player_players_906766 and field 
							JavaSDM.ensure(!__DEC_player_players_906766
									.equals(field));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_player_players_899705 = player.eContainer() instanceof SoccerPitch ? (SoccerPitch) player
									.eContainer() : null;

							// check object __DEC_player_players_899705 is really bound
							JavaSDM.ensure(__DEC_player_players_899705 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_player_players_899705
									.getPlayers().contains(player));

							// check isomorphic binding between objects __DEC_player_players_899705 and pitch 
							JavaSDM.ensure(!__DEC_player_players_899705
									.equals(pitch));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object field is really bound
						JavaSDM.ensure(field != null);
						// check object goalKeeper is really bound
						JavaSDM.ensure(goalKeeper != null);
						// check object pitch is really bound
						JavaSDM.ensure(pitch != null);
						// check object player is really bound
						JavaSDM.ensure(player != null);
						// check link field from player to field
						JavaSDM.ensure(field.equals(player.getField()));

						// check link fields from field to pitch
						JavaSDM.ensure(pitch.equals(field.eContainer()));

						// check link players from goalKeeper to pitch
						JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

						// check link players from player to pitch
						JavaSDM.ensure(pitch.equals(player.eContainer()));

						// attribute condition
						JavaSDM.ensure(field.getXPos() < 44);

						// attribute condition
						JavaSDM.ensure(field.getXPos() > 0);

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, pitch,
								field, player, goalKeeper);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(__result,
													match, "contents");

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");
									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_GoalKeeper_0(GoalKeeper goalKeeper) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_player_players_903137 = null;
		SoccerPitch __DEC_player_players_969528 = null;
		Match match = null;
		Iterator fujaba__IterPitchToPlayer = null;
		FieldPlayer player = null;
		Iterator fujaba__IterPitchToField = null;
		Field field = null;
		SoccerPitch pitch = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// bind object
			pitch = goalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalKeeper
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getPlayers().contains(goalKeeper));

			// iterate to-many link fields from pitch to field
			fujaba__Success = false;

			fujaba__IterPitchToField = new ArrayList(pitch.getFields())
					.iterator();

			while (fujaba__IterPitchToField.hasNext()) {
				try {
					field = (Field) fujaba__IterPitchToField.next();

					// check object field is really bound
					JavaSDM.ensure(field != null);
					// iterate to-many link players from pitch to player
					fujaba__Success = false;

					fujaba__IterPitchToPlayer = new ArrayList(
							pitch.getPlayers()).iterator();

					while (fujaba__IterPitchToPlayer.hasNext()) {
						try {
							_TmpObject = fujaba__IterPitchToPlayer.next();

							// ensure correct type and really bound of object player
							JavaSDM.ensure(_TmpObject instanceof FieldPlayer);
							player = (FieldPlayer) _TmpObject;
							// check link field from player to field
							JavaSDM.ensure(field.equals(player.getField()));

							// attribute condition
							JavaSDM.ensure(field.getXPos() < 44);

							// attribute condition
							JavaSDM.ensure(field.getXPos() > 0);

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_player_players_903137 = player
											.getField();

									// check object __DEC_player_players_903137 is really bound
									JavaSDM.ensure(__DEC_player_players_903137 != null);

									// check isomorphic binding between objects __DEC_player_players_903137 and field 
									JavaSDM.ensure(!__DEC_player_players_903137
											.equals(field));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_player_players_969528 = player
											.eContainer() instanceof SoccerPitch ? (SoccerPitch) player
											.eContainer() : null;

									// check object __DEC_player_players_969528 is really bound
									JavaSDM.ensure(__DEC_player_players_969528 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_player_players_969528
											.getPlayers().contains(player));

									// check isomorphic binding between objects __DEC_player_players_969528 and pitch 
									JavaSDM.ensure(!__DEC_player_players_969528
											.equals(pitch));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object field is really bound
								JavaSDM.ensure(field != null);
								// check object goalKeeper is really bound
								JavaSDM.ensure(goalKeeper != null);
								// check object pitch is really bound
								JavaSDM.ensure(pitch != null);
								// check object player is really bound
								JavaSDM.ensure(player != null);
								// check link field from player to field
								JavaSDM.ensure(field.equals(player.getField()));

								// check link fields from field to pitch
								JavaSDM.ensure(pitch.equals(field.eContainer()));

								// check link players from goalKeeper to pitch
								JavaSDM.ensure(pitch.equals(goalKeeper
										.eContainer()));

								// check link players from player to pitch
								JavaSDM.ensure(pitch.equals(player.eContainer()));

								// attribute condition
								JavaSDM.ensure(field.getXPos() < 44);

								// attribute condition
								JavaSDM.ensure(field.getXPos() > 0);

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										pitch, field, player, goalKeeper);
								if (fujaba__Success) {
									// statement node ''
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															__result, match,
															"contents");

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");
											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.MOVE_FORWARD_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.MOVE_FORWARD_RULE___IS_APPROPRIATE_FWD__MATCH_SOCCERPITCH_FIELD_FIELDPLAYER_GOALKEEPER:
			return isAppropriate_FWD((Match) arguments.get(0),
					(SoccerPitch) arguments.get(1), (Field) arguments.get(2),
					(FieldPlayer) arguments.get(3),
					(GoalKeeper) arguments.get(4));
		case RulesPackage.MOVE_FORWARD_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.MOVE_FORWARD_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.MOVE_FORWARD_RULE___IS_APPROPRIATE_FWD_SOCCER_PITCH_1__SOCCERPITCH:
			return isAppropriate_FWD_SoccerPitch_1((SoccerPitch) arguments
					.get(0));
		case RulesPackage.MOVE_FORWARD_RULE___IS_APPROPRIATE_FWD_FIELD_0__FIELD:
			return isAppropriate_FWD_Field_0((Field) arguments.get(0));
		case RulesPackage.MOVE_FORWARD_RULE___IS_APPROPRIATE_FWD_FIELD_PLAYER_0__FIELDPLAYER:
			return isAppropriate_FWD_FieldPlayer_0((FieldPlayer) arguments
					.get(0));
		case RulesPackage.MOVE_FORWARD_RULE___IS_APPROPRIATE_FWD_GOAL_KEEPER_0__GOALKEEPER:
			return isAppropriate_FWD_GoalKeeper_0((GoalKeeper) arguments.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}

} //MoveForwardRuleImpl
