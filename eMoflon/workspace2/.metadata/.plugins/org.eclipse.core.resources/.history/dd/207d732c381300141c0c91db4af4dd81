/**
 */
package SoccerStrategy.impl;

import SoccerStrategy.Rules.RulesPackage;

import SoccerStrategy.Rules.impl.RulesPackageImpl;

import SoccerStrategy.SoccerPitchToUpdate;
import SoccerStrategy.SoccerStrategyFactory;
import SoccerStrategy.SoccerStrategyPackage;

import TGGLanguage.TGGLanguagePackage;

import TGGRuntime.TGGRuntimePackage;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import soccerpitch.SoccerpitchPackage;

import updatemodel.UpdatemodelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SoccerStrategyPackageImpl extends EPackageImpl implements
		SoccerStrategyPackage {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass soccerPitchToUpdateEClass = null;

	/**
	 * Creates an instance of the model <b>Package</b>, registered with
	 * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
	 * package URI value.
	 * <p>Note: the correct way to create the package is via the static
	 * factory method {@link #init init()}, which also performs
	 * initialization of the package, or returns the registered package,
	 * if one already exists.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.ecore.EPackage.Registry
	 * @see SoccerStrategy.SoccerStrategyPackage#eNS_URI
	 * @see #init()
	 * @generated
	 */
	private SoccerStrategyPackageImpl() {
		super(eNS_URI, SoccerStrategyFactory.eINSTANCE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static boolean isInited = false;

	/**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 * 
	 * <p>This method is used to initialize {@link SoccerStrategyPackage#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
	public static SoccerStrategyPackage init() {
		if (isInited)
			return (SoccerStrategyPackage) EPackage.Registry.INSTANCE
					.getEPackage(SoccerStrategyPackage.eNS_URI);

		// Obtain or create and register package
		SoccerStrategyPackageImpl theSoccerStrategyPackage = (SoccerStrategyPackageImpl) (EPackage.Registry.INSTANCE
				.get(eNS_URI) instanceof SoccerStrategyPackageImpl ? EPackage.Registry.INSTANCE
				.get(eNS_URI) : new SoccerStrategyPackageImpl());

		isInited = true;

		// Initialize simple dependencies
		TGGLanguagePackage.eINSTANCE.eClass();
		UpdatemodelPackage.eINSTANCE.eClass();
		SoccerpitchPackage.eINSTANCE.eClass();

		// Obtain or create and register interdependencies
		RulesPackageImpl theRulesPackage = (RulesPackageImpl) (EPackage.Registry.INSTANCE
				.getEPackage(RulesPackage.eNS_URI) instanceof RulesPackageImpl ? EPackage.Registry.INSTANCE
				.getEPackage(RulesPackage.eNS_URI) : RulesPackage.eINSTANCE);

		// Create package meta-data objects
		theSoccerStrategyPackage.createPackageContents();
		theRulesPackage.createPackageContents();

		// Initialize created meta-data
		theSoccerStrategyPackage.initializePackageContents();
		theRulesPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theSoccerStrategyPackage.freeze();

		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(SoccerStrategyPackage.eNS_URI,
				theSoccerStrategyPackage);
		return theSoccerStrategyPackage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getSoccerPitchToUpdate() {
		return soccerPitchToUpdateEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getSoccerPitchToUpdate_Source() {
		return (EReference) soccerPitchToUpdateEClass.getEStructuralFeatures()
				.get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getSoccerPitchToUpdate_Target() {
		return (EReference) soccerPitchToUpdateEClass.getEStructuralFeatures()
				.get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SoccerStrategyFactory getSoccerStrategyFactory() {
		return (SoccerStrategyFactory) getEFactoryInstance();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isCreated = false;

	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createPackageContents() {
		if (isCreated)
			return;
		isCreated = true;

		// Create classes and their features
		soccerPitchToUpdateEClass = createEClass(SOCCER_PITCH_TO_UPDATE);
		createEReference(soccerPitchToUpdateEClass,
				SOCCER_PITCH_TO_UPDATE__SOURCE);
		createEReference(soccerPitchToUpdateEClass,
				SOCCER_PITCH_TO_UPDATE__TARGET);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isInitialized = false;

	/**
	 * Complete the initialization of the package and its meta-model.  This
	 * method is guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializePackageContents() {
		if (isInitialized)
			return;
		isInitialized = true;

		// Initialize package
		setName(eNAME);
		setNsPrefix(eNS_PREFIX);
		setNsURI(eNS_URI);

		// Obtain other dependent packages
		RulesPackage theRulesPackage = (RulesPackage) EPackage.Registry.INSTANCE
				.getEPackage(RulesPackage.eNS_URI);
		TGGRuntimePackage theTGGRuntimePackage = (TGGRuntimePackage) EPackage.Registry.INSTANCE
				.getEPackage(TGGRuntimePackage.eNS_URI);
		SoccerpitchPackage theSoccerpitchPackage = (SoccerpitchPackage) EPackage.Registry.INSTANCE
				.getEPackage(SoccerpitchPackage.eNS_URI);
		UpdatemodelPackage theUpdatemodelPackage = (UpdatemodelPackage) EPackage.Registry.INSTANCE
				.getEPackage(UpdatemodelPackage.eNS_URI);

		// Add subpackages
		getESubpackages().add(theRulesPackage);

		// Create type parameters

		// Set bounds for type parameters

		// Add supertypes to classes
		soccerPitchToUpdateEClass.getESuperTypes().add(
				theTGGRuntimePackage.getAbstractCorrespondence());

		// Initialize classes, features, and operations; add parameters
		initEClass(soccerPitchToUpdateEClass, SoccerPitchToUpdate.class,
				"SoccerPitchToUpdate", !IS_ABSTRACT, !IS_INTERFACE,
				IS_GENERATED_INSTANCE_CLASS);
		initEReference(getSoccerPitchToUpdate_Source(),
				theSoccerpitchPackage.getSoccerPitch(), null, "source", null,
				1, 1, SoccerPitchToUpdate.class, !IS_TRANSIENT, !IS_VOLATILE,
				IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES,
				!IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getSoccerPitchToUpdate_Target(),
				theUpdatemodelPackage.getUpdate(), null, "target", null, 1, 1,
				SoccerPitchToUpdate.class, !IS_TRANSIENT, !IS_VOLATILE,
				IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES,
				!IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		// Create resource
		createResource(eNS_URI);
	}

} //SoccerStrategyPackageImpl
