/**
 */
package SoccerStrategy.Rules.impl;

import SoccerStrategy.Rules.GoalKeeper_KickOffBall;
import SoccerStrategy.Rules.RulesPackage;

import SoccerStrategy.SoccerPitchToUpdate;
import SoccerStrategy.SoccerStrategyFactory;

import TGGLanguage.csp.*;

import TGGRuntime.EObjectContainer;
import TGGRuntime.Edge;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.TGGRuntimeFactory;

import TGGRuntime.impl.AbstractRuleImpl;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import soccerpitch.Ball;
import soccerpitch.Field;
import soccerpitch.FieldPlayer;
import soccerpitch.GoalField;
import soccerpitch.GoalKeeper;
import soccerpitch.Player;
import soccerpitch.SoccerPitch;

import updatemodel.MovePlayer;
import updatemodel.ShootBall;
import updatemodel.Update;
import updatemodel.UpdatemodelFactory;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Goal Keeper Kick Off Ball</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class GoalKeeper_KickOffBallImpl extends AbstractRuleImpl implements
		GoalKeeper_KickOffBall {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalKeeper_KickOffBallImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.Literals.GOAL_KEEPER_KICK_OFF_BALL;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Ball ball = null;
		GoalField goalField = null;
		GoalKeeper goalKeeper = null;
		SoccerPitch pitch = null;
		IsApplicableMatch isApplicableMatch = null;
		Update update = null;
		Iterator fujaba__IterPitchToP2u = null;
		SoccerPitchToUpdate p2u = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("GoalKeeper_KickOffBall");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					performOperation, "performOperation");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("ball"));

			// ensure correct type and really bound of object ball
			JavaSDM.ensure(_TmpObject instanceof Ball);
			ball = (Ball) _TmpObject;
			_TmpObject = (match.getObject("goalField"));

			// ensure correct type and really bound of object goalField
			JavaSDM.ensure(_TmpObject instanceof GoalField);
			goalField = (GoalField) _TmpObject;
			_TmpObject = (match.getObject("goalKeeper"));

			// ensure correct type and really bound of object goalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			goalKeeper = (GoalKeeper) _TmpObject;
			_TmpObject = (match.getObject("pitch"));

			// ensure correct type and really bound of object pitch
			JavaSDM.ensure(_TmpObject instanceof SoccerPitch);
			pitch = (SoccerPitch) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'find context'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// check object goalField is really bound
			JavaSDM.ensure(goalField != null);
			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// check link ball from ball to goalKeeper
			JavaSDM.ensure(goalKeeper.equals(ball.getPlayer()));

			// check link field from goalField to ball
			JavaSDM.ensure(ball.equals(goalField.getBall()));

			// check link field from goalKeeper to goalField
			JavaSDM.ensure(goalField.equals(goalKeeper.getField()));

			// check link ball from ball to pitch
			JavaSDM.ensure(pitch.equals(ball.eContainer()));

			// check link fields from goalField to pitch
			JavaSDM.ensure(pitch.equals(goalField.eContainer()));

			// check link players from goalKeeper to pitch
			JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

			// iterate to-many link source from pitch to p2u
			fujaba__Success = false;

			fujaba__IterPitchToP2u = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(pitch,
							SoccerPitchToUpdate.class, "source")).iterator();

			while (fujaba__IterPitchToP2u.hasNext()) {
				try {
					p2u = (SoccerPitchToUpdate) fujaba__IterPitchToP2u.next();

					// check object p2u is really bound
					JavaSDM.ensure(p2u != null);
					// bind object
					update = p2u.getTarget();

					// check object update is really bound
					JavaSDM.ensure(update != null);

					// create object isApplicableMatch
					isApplicableMatch = TGGRuntimeFactory.eINSTANCE
							.createIsApplicableMatch();

					// statement node 'solve CSP'
					// Create CSP
					CSP csp = CspFactory.eINSTANCE.createCSP();
					isApplicableMatch.getAttributeInfo().add(csp);

					// Create literals
					Variable<Number> literal0 = CspFactory.eINSTANCE
							.createVariable("literal0", true, csp);
					literal0.setValue(5);

					// Create attribute variables
					Variable<Number> var_goalKeeper_number = CspFactory.eINSTANCE
							.createVariable("goalKeeper.number", true, csp);
					var_goalKeeper_number.setValue(goalKeeper.getNumber());
					Variable<soccerpitch.Teams> var_pitch_ownTeam = CspFactory.eINSTANCE
							.createVariable("pitch.ownTeam", true, csp);
					var_pitch_ownTeam.setValue(pitch.getOwnTeam());

					// Create explicit parameters

					// Create unbound variables
					Variable<Number> var_shootAction_playerNumber = CspFactory.eINSTANCE
							.createVariable("shootAction.playerNumber", csp);
					Variable<Number> var_shootAction_xDist = CspFactory.eINSTANCE
							.createVariable("shootAction.xDist", csp);
					Variable<Number> var_shootAction_yDist = CspFactory.eINSTANCE
							.createVariable("shootAction.yDist", csp);

					// Create constraints
					Eq<Number> eq = new Eq<Number>();
					TeamToDirection teamToDirection = new TeamToDirection();
					Eq<Number> eq_0 = new Eq<Number>();

					csp.getConstraints().add(eq);
					csp.getConstraints().add(teamToDirection);
					csp.getConstraints().add(eq_0);

					// Solve CSP
					eq.setRuleName("");
					eq.solve(var_goalKeeper_number,
							var_shootAction_playerNumber);
					teamToDirection.setRuleName("");
					teamToDirection.solve(var_pitch_ownTeam,
							var_shootAction_xDist);
					eq_0.setRuleName("");
					eq_0.solve(var_shootAction_yDist, literal0);

					// Snapshot pattern match on which CSP is solved
					isApplicableMatch.registerObject("update", update);
					isApplicableMatch.registerObject("goalKeeper", goalKeeper);
					isApplicableMatch.registerObject("goalField", goalField);
					isApplicableMatch.registerObject("pitch", pitch);
					isApplicableMatch.registerObject("p2u", p2u);
					isApplicableMatch.registerObject("ball", ball);

					// statement node 'check CSP'
					fujaba__Success = csp.check();
					if (fujaba__Success) {
						// story node 'add match to rule result'
						try {
							fujaba__Success = false;

							// check object isApplicableMatch is really bound
							JavaSDM.ensure(isApplicableMatch != null);
							// check object ruleresult is really bound
							JavaSDM.ensure(ruleresult != null);
							// assign attribute ruleresult
							ruleresult.setSuccess(true);

							// create link
							ruleresult.getIsApplicableMatch().add(
									isApplicableMatch);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, GoalKeeper goalKeeper,
			GoalField goalField, SoccerPitch pitch, Ball ball) {
		boolean fujaba__Success = false;
		Edge ball__player__goalKeeper = null;
		Edge goalKeeper__field__goalField = null;
		Edge pitch__players__goalKeeper = null;
		Edge pitch__fields__goalField = null;
		Edge ball__field__goalField = null;
		Edge pitch__ball__ball = null;

		// statement node 'Solve CSP'
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables
		Variable<soccerpitch.Teams> var_goalKeeper_team = CspFactory.eINSTANCE
				.createVariable("goalKeeper.team", true, csp);
		var_goalKeeper_team.setValue(goalKeeper.getTeam());
		Variable<soccerpitch.Teams> var_pitch_ownTeam = CspFactory.eINSTANCE
				.createVariable("pitch.ownTeam", true, csp);
		var_pitch_ownTeam.setValue(pitch.getOwnTeam());

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		Eq<soccerpitch.Teams> eq = new Eq<soccerpitch.Teams>();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_goalKeeper_team, var_pitch_ownTeam);

		// statement node 'Check CSP'
		fujaba__Success = csp.check();
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object goalField is really bound
				JavaSDM.ensure(goalField != null);
				// check object goalKeeper is really bound
				JavaSDM.ensure(goalKeeper != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// create object ball__player__goalKeeper
				ball__player__goalKeeper = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// create object goalKeeper__field__goalField
				goalKeeper__field__goalField = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// create object pitch__players__goalKeeper
				pitch__players__goalKeeper = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// assign attribute goalKeeper__field__goalField
				goalKeeper__field__goalField.setName("field");
				// assign attribute pitch__players__goalKeeper
				pitch__players__goalKeeper.setName("players");
				// assign attribute ball__player__goalKeeper
				ball__player__goalKeeper.setName("player");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						ball__player__goalKeeper, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						goalKeeper__field__goalField, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__players__goalKeeper, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						goalKeeper, "toBeTranslatedElements");

				// create link
				goalKeeper__field__goalField.setSrc(goalKeeper);

				// create link
				ball__player__goalKeeper.setTrg(goalKeeper);

				// create link
				pitch__players__goalKeeper.setTrg(goalKeeper);

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						goalKeeper__field__goalField, goalField, "trg");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						pitch__players__goalKeeper, pitch, "src");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(
						ball__player__goalKeeper, ball, "src");
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object goalField is really bound
				JavaSDM.ensure(goalField != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// create object pitch__fields__goalField
				pitch__fields__goalField = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// create object ball__field__goalField
				ball__field__goalField = TGGRuntimeFactory.eINSTANCE
						.createEdge();

				// create object pitch__ball__ball
				pitch__ball__ball = TGGRuntimeFactory.eINSTANCE.createEdge();

				// assign attribute pitch__ball__ball
				pitch__ball__ball.setName("ball");
				// assign attribute pitch__fields__goalField
				pitch__fields__goalField.setName("fields");
				// assign attribute ball__field__goalField
				ball__field__goalField.setName("field");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__fields__goalField, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						ball, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						goalField, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						ball__field__goalField, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						pitch__ball__ball, "contextEdges");

				// create link
				ball__field__goalField.setTrg(goalField);

				// create link
				pitch__fields__goalField.setTrg(goalField);

				// create link
				pitch__ball__ball.setSrc(pitch);

				// create link
				pitch__fields__goalField.setSrc(pitch);

				// create link
				pitch__ball__ball.setTrg(ball);

				// create link
				ball__field__goalField.setSrc(ball);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			match.registerObject("goalKeeper", goalKeeper);
			match.registerObject("goalField", goalField);
			match.registerObject("pitch", pitch);
			match.registerObject("ball", ball);

			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Ball ball = null;
		GoalField goalField = null;
		GoalKeeper goalKeeper = null;
		SoccerPitchToUpdate p2u = null;
		SoccerPitch pitch = null;
		Update update = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		ShootBall shootAction = null;
		PerformRuleResult ruleresult = null;
		Edge goalKeeper__field__goalField = null;
		Edge pitch__players__goalKeeper = null;
		Edge update__actions__shootAction = null;
		Edge ball__player__goalKeeper = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("ball"));

			// ensure correct type and really bound of object ball
			JavaSDM.ensure(_TmpObject instanceof Ball);
			ball = (Ball) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("goalField"));

			// ensure correct type and really bound of object goalField
			JavaSDM.ensure(_TmpObject instanceof GoalField);
			goalField = (GoalField) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("goalKeeper"));

			// ensure correct type and really bound of object goalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			goalKeeper = (GoalKeeper) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("p2u"));

			// ensure correct type and really bound of object p2u
			JavaSDM.ensure(_TmpObject instanceof SoccerPitchToUpdate);
			p2u = (SoccerPitchToUpdate) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("pitch"));

			// ensure correct type and really bound of object pitch
			JavaSDM.ensure(_TmpObject instanceof SoccerPitch);
			pitch = (SoccerPitch) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("update"));

			// ensure correct type and really bound of object update
			JavaSDM.ensure(_TmpObject instanceof Update);
			update = (Update) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			if (!fujaba__Success) {
				fujaba__Success = true;
				csp = null;
			}
			// create object shootAction
			shootAction = UpdatemodelFactory.eINSTANCE.createShootBall();

			// assign attribute shootAction
			shootAction.setPlayerNumber(((Number) csp.getAttributeVariable(
					"shootAction", "playerNumber").getValue()).intValue());
			// assign attribute shootAction
			shootAction.setXDist(((Number) csp.getAttributeVariable(
					"shootAction", "xDist").getValue()).intValue());
			// assign attribute shootAction
			shootAction.setYDist(((Number) csp.getAttributeVariable(
					"shootAction", "yDist").getValue()).intValue());

			// create link
			update.getActions().add(shootAction);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// check object shootAction is really bound
			JavaSDM.ensure(shootAction != null);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(true);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					goalKeeper, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					shootAction, "createdElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// check object goalField is really bound
			JavaSDM.ensure(goalField != null);
			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// check object p2u is really bound
			JavaSDM.ensure(p2u != null);
			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object shootAction is really bound
			JavaSDM.ensure(shootAction != null);
			// check object update is really bound
			JavaSDM.ensure(update != null);
			// check isomorphic binding between objects goalField and ball 
			JavaSDM.ensure(!goalField.equals(ball));

			// check isomorphic binding between objects goalKeeper and ball 
			JavaSDM.ensure(!goalKeeper.equals(ball));

			// check isomorphic binding between objects p2u and ball 
			JavaSDM.ensure(!p2u.equals(ball));

			// check isomorphic binding between objects pitch and ball 
			JavaSDM.ensure(!pitch.equals(ball));

			// check isomorphic binding between objects shootAction and ball 
			JavaSDM.ensure(!shootAction.equals(ball));

			// check isomorphic binding between objects update and ball 
			JavaSDM.ensure(!update.equals(ball));

			// check isomorphic binding between objects goalKeeper and goalField 
			JavaSDM.ensure(!goalKeeper.equals(goalField));

			// check isomorphic binding between objects p2u and goalField 
			JavaSDM.ensure(!p2u.equals(goalField));

			// check isomorphic binding between objects pitch and goalField 
			JavaSDM.ensure(!pitch.equals(goalField));

			// check isomorphic binding between objects shootAction and goalField 
			JavaSDM.ensure(!shootAction.equals(goalField));

			// check isomorphic binding between objects update and goalField 
			JavaSDM.ensure(!update.equals(goalField));

			// check isomorphic binding between objects p2u and goalKeeper 
			JavaSDM.ensure(!p2u.equals(goalKeeper));

			// check isomorphic binding between objects pitch and goalKeeper 
			JavaSDM.ensure(!pitch.equals(goalKeeper));

			// check isomorphic binding between objects shootAction and goalKeeper 
			JavaSDM.ensure(!shootAction.equals(goalKeeper));

			// check isomorphic binding between objects update and goalKeeper 
			JavaSDM.ensure(!update.equals(goalKeeper));

			// check isomorphic binding between objects pitch and p2u 
			JavaSDM.ensure(!pitch.equals(p2u));

			// check isomorphic binding between objects shootAction and p2u 
			JavaSDM.ensure(!shootAction.equals(p2u));

			// check isomorphic binding between objects update and p2u 
			JavaSDM.ensure(!update.equals(p2u));

			// check isomorphic binding between objects shootAction and pitch 
			JavaSDM.ensure(!shootAction.equals(pitch));

			// check isomorphic binding between objects update and pitch 
			JavaSDM.ensure(!update.equals(pitch));

			// check isomorphic binding between objects update and shootAction 
			JavaSDM.ensure(!update.equals(shootAction));

			// create object goalKeeper__field__goalField
			goalKeeper__field__goalField = TGGRuntimeFactory.eINSTANCE
					.createEdge();

			// create object pitch__players__goalKeeper
			pitch__players__goalKeeper = TGGRuntimeFactory.eINSTANCE
					.createEdge();

			// create object update__actions__shootAction
			update__actions__shootAction = TGGRuntimeFactory.eINSTANCE
					.createEdge();

			// create object ball__player__goalKeeper
			ball__player__goalKeeper = TGGRuntimeFactory.eINSTANCE.createEdge();

			// assign attribute update__actions__shootAction
			update__actions__shootAction.setName("actions");
			// assign attribute goalKeeper__field__goalField
			goalKeeper__field__goalField.setName("field");
			// assign attribute pitch__players__goalKeeper
			pitch__players__goalKeeper.setName("players");
			// assign attribute ball__player__goalKeeper
			ball__player__goalKeeper.setName("player");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					goalKeeper__field__goalField, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					pitch__players__goalKeeper, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					update__actions__shootAction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					ball__player__goalKeeper, "translatedEdges");

			// create link
			update__actions__shootAction.setTrg(shootAction);

			// create link
			update__actions__shootAction.setSrc(update);

			// create link
			goalKeeper__field__goalField.setSrc(goalKeeper);

			// create link
			pitch__players__goalKeeper.setTrg(goalKeeper);

			// create link
			ball__player__goalKeeper.setTrg(goalKeeper);

			// create link
			goalKeeper__field__goalField.setTrg(goalField);

			// create link
			pitch__players__goalKeeper.setSrc(pitch);

			// create link
			ball__player__goalKeeper.setSrc(ball);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return match
				.getObject("goalKeeper")
				.eClass()
				.equals(soccerpitch.SoccerpitchPackage.eINSTANCE
						.getGoalKeeper());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_GoalKeeper_4(GoalKeeper goalKeeper) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_goalKeeper_players_169183 = null;
		SoccerPitch __DEC_goalKeeper_players_647272 = null;
		Match match = null;
		SoccerPitch pitch = null;
		Ball ball = null;
		GoalField goalField = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object goalKeeper is really bound
			JavaSDM.ensure(goalKeeper != null);
			// bind object
			_TmpObject = goalKeeper.getField();

			// ensure correct type and really bound of object goalField
			JavaSDM.ensure(_TmpObject instanceof GoalField);
			goalField = (GoalField) _TmpObject;

			// bind object
			ball = goalKeeper.getBall();

			// check object ball is really bound
			JavaSDM.ensure(ball != null);

			// check link field from goalField to ball
			JavaSDM.ensure(ball.equals(goalField.getBall()));

			// bind object
			pitch = goalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalKeeper
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getPlayers().contains(goalKeeper));

			// check link ball from ball to pitch
			JavaSDM.ensure(pitch.equals(ball.eContainer()));

			// check link fields from goalField to pitch
			JavaSDM.ensure(pitch.equals(goalField.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_goalKeeper_players_169183 = goalKeeper.getField();

					// check object __DEC_goalKeeper_players_169183 is really bound
					JavaSDM.ensure(__DEC_goalKeeper_players_169183 != null);

					// check isomorphic binding between objects __DEC_goalKeeper_players_169183 and goalField 
					JavaSDM.ensure(!__DEC_goalKeeper_players_169183
							.equals(goalField));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_goalKeeper_players_647272 = goalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalKeeper
							.eContainer() : null;

					// check object __DEC_goalKeeper_players_647272 is really bound
					JavaSDM.ensure(__DEC_goalKeeper_players_647272 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_goalKeeper_players_647272.getPlayers()
							.contains(goalKeeper));

					// check isomorphic binding between objects __DEC_goalKeeper_players_647272 and pitch 
					JavaSDM.ensure(!__DEC_goalKeeper_players_647272
							.equals(pitch));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object goalField is really bound
				JavaSDM.ensure(goalField != null);
				// check object goalKeeper is really bound
				JavaSDM.ensure(goalKeeper != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// check link ball from ball to goalKeeper
				JavaSDM.ensure(goalKeeper.equals(ball.getPlayer()));

				// check link field from goalField to ball
				JavaSDM.ensure(ball.equals(goalField.getBall()));

				// check link field from goalKeeper to goalField
				JavaSDM.ensure(goalField.equals(goalKeeper.getField()));

				// check link ball from ball to pitch
				JavaSDM.ensure(pitch.equals(ball.eContainer()));

				// check link fields from goalField to pitch
				JavaSDM.ensure(pitch.equals(goalField.eContainer()));

				// check link players from goalKeeper to pitch
				JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, goalKeeper,
						goalField, pitch, ball);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(__result, match,
											"contents");

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");
							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_GoalField_4(GoalField goalField) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_goalKeeper_players_622361 = null;
		SoccerPitch __DEC_goalKeeper_players_572311 = null;
		Match match = null;
		Iterator fujaba__IterGoalFieldToGoalKeeper = null;
		GoalKeeper goalKeeper = null;
		SoccerPitch pitch = null;
		Ball ball = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object goalField is really bound
			JavaSDM.ensure(goalField != null);
			// bind object
			ball = goalField.getBall();

			// check object ball is really bound
			JavaSDM.ensure(ball != null);

			// bind object
			pitch = goalField.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalField
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(pitch.getFields().contains(goalField));

			// check link ball from ball to pitch
			JavaSDM.ensure(pitch.equals(ball.eContainer()));

			// iterate to-many link field from goalField to goalKeeper
			fujaba__Success = false;

			fujaba__IterGoalFieldToGoalKeeper = new ArrayList(
					goalField.getPlayers()).iterator();

			while (fujaba__IterGoalFieldToGoalKeeper.hasNext()) {
				try {
					_TmpObject = fujaba__IterGoalFieldToGoalKeeper.next();

					// ensure correct type and really bound of object goalKeeper
					JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
					goalKeeper = (GoalKeeper) _TmpObject;
					// check link ball from ball to goalKeeper
					JavaSDM.ensure(goalKeeper.equals(ball.getPlayer()));

					// check link players from goalKeeper to pitch
					JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_goalKeeper_players_622361 = goalKeeper
									.getField();

							// check object __DEC_goalKeeper_players_622361 is really bound
							JavaSDM.ensure(__DEC_goalKeeper_players_622361 != null);

							// check isomorphic binding between objects __DEC_goalKeeper_players_622361 and goalField 
							JavaSDM.ensure(!__DEC_goalKeeper_players_622361
									.equals(goalField));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_goalKeeper_players_572311 = goalKeeper
									.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalKeeper
									.eContainer() : null;

							// check object __DEC_goalKeeper_players_572311 is really bound
							JavaSDM.ensure(__DEC_goalKeeper_players_572311 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_goalKeeper_players_572311
									.getPlayers().contains(goalKeeper));

							// check isomorphic binding between objects __DEC_goalKeeper_players_572311 and pitch 
							JavaSDM.ensure(!__DEC_goalKeeper_players_572311
									.equals(pitch));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object ball is really bound
						JavaSDM.ensure(ball != null);
						// check object goalField is really bound
						JavaSDM.ensure(goalField != null);
						// check object goalKeeper is really bound
						JavaSDM.ensure(goalKeeper != null);
						// check object pitch is really bound
						JavaSDM.ensure(pitch != null);
						// check link ball from ball to goalKeeper
						JavaSDM.ensure(goalKeeper.equals(ball.getPlayer()));

						// check link field from goalField to ball
						JavaSDM.ensure(ball.equals(goalField.getBall()));

						// check link field from goalKeeper to goalField
						JavaSDM.ensure(goalField.equals(goalKeeper.getField()));

						// check link ball from ball to pitch
						JavaSDM.ensure(pitch.equals(ball.eContainer()));

						// check link fields from goalField to pitch
						JavaSDM.ensure(pitch.equals(goalField.eContainer()));

						// check link players from goalKeeper to pitch
						JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match,
								goalKeeper, goalField, pitch, ball);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(__result,
													match, "contents");

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");
									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_SoccerPitch_9(SoccerPitch pitch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_goalKeeper_players_581943 = null;
		SoccerPitch __DEC_goalKeeper_players_879378 = null;
		Match match = null;
		GoalField goalField = null;
		Ball ball = null;
		Iterator fujaba__IterPitchToGoalKeeper = null;
		GoalKeeper goalKeeper = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);
			// iterate to-many link players from pitch to goalKeeper
			fujaba__Success = false;

			fujaba__IterPitchToGoalKeeper = new ArrayList(pitch.getPlayers())
					.iterator();

			while (fujaba__IterPitchToGoalKeeper.hasNext()) {
				try {
					_TmpObject = fujaba__IterPitchToGoalKeeper.next();

					// ensure correct type and really bound of object goalKeeper
					JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
					goalKeeper = (GoalKeeper) _TmpObject;
					// bind object
					ball = goalKeeper.getBall();

					// check object ball is really bound
					JavaSDM.ensure(ball != null);

					// bind object
					_TmpObject = goalKeeper.getField();

					// ensure correct type and really bound of object goalField
					JavaSDM.ensure(_TmpObject instanceof GoalField);
					goalField = (GoalField) _TmpObject;

					// check link field from goalField to ball
					JavaSDM.ensure(ball.equals(goalField.getBall()));

					// check link ball from ball to pitch
					JavaSDM.ensure(pitch.equals(ball.eContainer()));

					// check link fields from goalField to pitch
					JavaSDM.ensure(pitch.equals(goalField.eContainer()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_goalKeeper_players_581943 = goalKeeper
									.getField();

							// check object __DEC_goalKeeper_players_581943 is really bound
							JavaSDM.ensure(__DEC_goalKeeper_players_581943 != null);

							// check isomorphic binding between objects __DEC_goalKeeper_players_581943 and goalField 
							JavaSDM.ensure(!__DEC_goalKeeper_players_581943
									.equals(goalField));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_goalKeeper_players_879378 = goalKeeper
									.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalKeeper
									.eContainer() : null;

							// check object __DEC_goalKeeper_players_879378 is really bound
							JavaSDM.ensure(__DEC_goalKeeper_players_879378 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_goalKeeper_players_879378
									.getPlayers().contains(goalKeeper));

							// check isomorphic binding between objects __DEC_goalKeeper_players_879378 and pitch 
							JavaSDM.ensure(!__DEC_goalKeeper_players_879378
									.equals(pitch));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object ball is really bound
						JavaSDM.ensure(ball != null);
						// check object goalField is really bound
						JavaSDM.ensure(goalField != null);
						// check object goalKeeper is really bound
						JavaSDM.ensure(goalKeeper != null);
						// check object pitch is really bound
						JavaSDM.ensure(pitch != null);
						// check link ball from ball to goalKeeper
						JavaSDM.ensure(goalKeeper.equals(ball.getPlayer()));

						// check link field from goalField to ball
						JavaSDM.ensure(ball.equals(goalField.getBall()));

						// check link field from goalKeeper to goalField
						JavaSDM.ensure(goalField.equals(goalKeeper.getField()));

						// check link ball from ball to pitch
						JavaSDM.ensure(pitch.equals(ball.eContainer()));

						// check link fields from goalField to pitch
						JavaSDM.ensure(pitch.equals(goalField.eContainer()));

						// check link players from goalKeeper to pitch
						JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match,
								goalKeeper, goalField, pitch, ball);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(__result,
													match, "contents");

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");
									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_Ball_2(Ball ball) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Field __DEC_goalKeeper_players_306769 = null;
		SoccerPitch __DEC_goalKeeper_players_312747 = null;
		Match match = null;
		SoccerPitch pitch = null;
		GoalField goalField = null;
		GoalKeeper goalKeeper = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object ball is really bound
			JavaSDM.ensure(ball != null);
			// bind object
			_TmpObject = ball.getPlayer();

			// ensure correct type and really bound of object goalKeeper
			JavaSDM.ensure(_TmpObject instanceof GoalKeeper);
			goalKeeper = (GoalKeeper) _TmpObject;

			// bind object
			_TmpObject = goalKeeper.getField();

			// ensure correct type and really bound of object goalField
			JavaSDM.ensure(_TmpObject instanceof GoalField);
			goalField = (GoalField) _TmpObject;

			// check link field from goalField to ball
			JavaSDM.ensure(ball.equals(goalField.getBall()));

			// bind object
			pitch = ball.eContainer() instanceof SoccerPitch ? (SoccerPitch) ball
					.eContainer() : null;

			// check object pitch is really bound
			JavaSDM.ensure(pitch != null);

			// check if contained via correct reference
			JavaSDM.ensure(ball.equals(pitch.getBall()));

			// check link fields from goalField to pitch
			JavaSDM.ensure(pitch.equals(goalField.eContainer()));

			// check link players from goalKeeper to pitch
			JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_goalKeeper_players_306769 = goalKeeper.getField();

					// check object __DEC_goalKeeper_players_306769 is really bound
					JavaSDM.ensure(__DEC_goalKeeper_players_306769 != null);

					// check isomorphic binding between objects __DEC_goalKeeper_players_306769 and goalField 
					JavaSDM.ensure(!__DEC_goalKeeper_players_306769
							.equals(goalField));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_goalKeeper_players_312747 = goalKeeper.eContainer() instanceof SoccerPitch ? (SoccerPitch) goalKeeper
							.eContainer() : null;

					// check object __DEC_goalKeeper_players_312747 is really bound
					JavaSDM.ensure(__DEC_goalKeeper_players_312747 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_goalKeeper_players_312747.getPlayers()
							.contains(goalKeeper));

					// check isomorphic binding between objects __DEC_goalKeeper_players_312747 and pitch 
					JavaSDM.ensure(!__DEC_goalKeeper_players_312747
							.equals(pitch));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object ball is really bound
				JavaSDM.ensure(ball != null);
				// check object goalField is really bound
				JavaSDM.ensure(goalField != null);
				// check object goalKeeper is really bound
				JavaSDM.ensure(goalKeeper != null);
				// check object pitch is really bound
				JavaSDM.ensure(pitch != null);
				// check link ball from ball to goalKeeper
				JavaSDM.ensure(goalKeeper.equals(ball.getPlayer()));

				// check link field from goalField to ball
				JavaSDM.ensure(ball.equals(goalField.getBall()));

				// check link field from goalKeeper to goalField
				JavaSDM.ensure(goalField.equals(goalKeeper.getField()));

				// check link ball from ball to pitch
				JavaSDM.ensure(pitch.equals(ball.eContainer()));

				// check link fields from goalField to pitch
				JavaSDM.ensure(pitch.equals(goalField.eContainer()));

				// check link players from goalKeeper to pitch
				JavaSDM.ensure(pitch.equals(goalKeeper.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, goalKeeper,
						goalField, pitch, ball);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(__result, match,
											"contents");

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");
							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___IS_APPROPRIATE_FWD__MATCH_GOALKEEPER_GOALFIELD_SOCCERPITCH_BALL:
			return isAppropriate_FWD((Match) arguments.get(0),
					(GoalKeeper) arguments.get(1),
					(GoalField) arguments.get(2),
					(SoccerPitch) arguments.get(3), (Ball) arguments.get(4));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___IS_APPROPRIATE_FWD_GOAL_KEEPER_4__GOALKEEPER:
			return isAppropriate_FWD_GoalKeeper_4((GoalKeeper) arguments.get(0));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___IS_APPROPRIATE_FWD_GOAL_FIELD_4__GOALFIELD:
			return isAppropriate_FWD_GoalField_4((GoalField) arguments.get(0));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___IS_APPROPRIATE_FWD_SOCCER_PITCH_9__SOCCERPITCH:
			return isAppropriate_FWD_SoccerPitch_9((SoccerPitch) arguments
					.get(0));
		case RulesPackage.GOAL_KEEPER_KICK_OFF_BALL___IS_APPROPRIATE_FWD_BALL_2__BALL:
			return isAppropriate_FWD_Ball_2((Ball) arguments.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}

} //GoalKeeper_KickOffBallImpl
